#include<graphics.h>	//used for including graphics
#include<dos.h>
#include<stdio.h>
#include<conio.h>
#include<stdlib.h>

//for declaration of binary and easy values
#define FALSE 0
#define TRUE 1
#define EMPTY 0
#define X 1
#define O 2

int arr[9],nextchar=X,over;	//declaration of array and variables
struct rect
{
	int x1,y1,x2,y2;
};
/* putting values to take the input of the mouse in the space first 2 coordinates of 
   top left corner second 2 coordinates of bottom right corner*/
struct rect square[]={
	10,10,49,49,
	60,10,99,49,
	110,10,149,49,
	10,60,49,99,
	60,60,99,99,
	110,60,149,99,
	10,110,49,149,
	60,110,99,149,
	110,110,149,149
	};
int initializemouse();	//function declared to initialize mouse
void hidemousepointer();	//function declared to hide mouse pointer
int resetgame();	//function declared to reset game
void drawgrid();	//function declared to draw grid
void showmousepointer();	//function declared to show mouse pointer 
void onleftbuttondown(int , int );	//function declared to proceed when left button of mouse is clicked
void getmouseposition(int *button,int *x,int *y);	//function declared to get mouse position
void drawxando();	//function declared to draw X and O
int isgameover();	//function declared to check whether game is over
void onrightbuttondown(int x,int y);	//function declared to proceed when right button of mouse is clicked
void drawx(int i);	//function declared to draw X
void drawo(int i);	//function declared to draw O
int findwinner();	//function declared to find the winner
int isdrawn();	//function declared to check whether the game is draw

int main ()
{
	int g_error;
	int gd=DETECT,gm,button;
	int x,y,i,flag;
	char reset='y';
	initgraph(&gd,&gm,"C:\\turboc3\\BGI");	//inbuilt function to initialize the graphics mode
    
	while(reset=='y')
	{
		drawgrid();		//function called to draw grid
		showmousepointer();		//function called to show mouse pointer
		
		for(i=0;i<=8;i++)
		arr[i]=EMPTY;
		over=FALSE;
		while(over==FALSE)
		{
			getmouseposition(&button,&x,&y);		//function called to get mouse position
			if((button & 1)==1)
			{
				onleftbuttondown(x,y);		//function called to proceed when left button of mouse is clicked
				drawxando();		//function called to draw X and O
				over=isgameover();		//function return value assigned to check ehether the game is over
			}
			if((button & 2)==2)
			{
				onrightbuttondown(x,y);		//function called to proceed when right button of mouse is clicked
				drawxando();		//function called to draw X and O
				over=isgameover();		//function return value assigned to check ehether the game is over
			}

		}
		reset=resetgame();		//function return value assigned to reset the game if the game is over or game is drawed
		hidemousepointer();		//function called to hide the mouse pointer when not required

	}
	closegraph();		//inbuilt function to close the graphics mode which is intialised at the start of the int main function
	restorecrtmode();	//inbuit function which allows fast switch to text mode
	getch();
	return 0;
}

initializemouse()	//function definition to initialize the mouse
{
	union REGS i,o;
	i.x.ax=0;
	int86(0x33,&i,&o);	//inbulit function of 8086 processor
	return(o.x.ax);
}

void showmousepointer()	//function definition to show mouse pointer
{
	union REGS i,o;
	i.x.ax=1;
	int86(0x33,&i,&o);	//inbulit function of 8086 processor
}

void hidemousepointer()	//function definition to hide mouse pointer when not necessary
{
	union REGS i,o;
	i.x.ax=2;
	int86(0x33,&i,&o);	//inbulit function of 8086 processor
}

void drawgrid()	//function definition to draw the grid to play x and o
{
	cleardevice();
	setcolor(BLUE);
	setfillstyle(BLUE,BLUE);
	bar(54,10,60,149);
	floodfill(55,15,BLUE);
	bar(10,54,149,60);
	floodfill(11,55,BLUE);
	bar(10,104,149,110);
	floodfill(11,109,BLUE);
	bar(104,10,110,149);
	floodfill(105,11,BLUE);
}

void getmouseposition(int *button,int *x,int *y)	//function definition to get the mouse position
{
	union REGS i,o;
	i.x.ax=3;
	int86(0x33,&i,&o);
	*button=o.x.bx;
	*x=o.x.cx;
	*y=o.x.dx;
}

void onleftbuttondown(int x,int y)	//function definition to proceed when left button of mouse is clicked
{
	int i;
	if(nextchar==O)
		return 0;
	for(i=0;i<=8;i++)
	{
		if((x>=square[i].x1&&x<=square[i].x2&&y>=square[i].y1&&y<=square[i].y2&&arr[i]==EMPTY))
		{
			arr[i]=X ;
			nextchar=O;
			break;
		}
	}
}

void onrightbuttondown(int x,int y)	//function definition to proceed when right button of mouse is clicked
{
	int i;
	if(nextchar==X)
		return 0;
	for(i=0;i<=8;i++)
	{
		if((x>=square[i].x1&&x<=square[i].x2&&y>=square[i].y1&&y<=square[i].y2&&arr[i]==EMPTY))
		{
			arr[i]=O;
			nextchar=X;
			break;
		}
	}
}

void drawxando()	//function definition to draw the X and O
{
	int i;
	for(i=0;i<=8;i++)
	{
		if(arr[i]==X)
		drawx(i);
		if(arr[i]==O)
		drawo(i);
	}
}

void drawx(int i)	//function definition to draw X
{
	setcolor(MAGENTA);
	setlinestyle(SOLID_LINE,0,THICK_WIDTH);
	hidemousepointer();
	line(square[i].x1+10,square[i].y1+10,square[i].x2-10,square[i].y2-10);
	line(square[i].x2-10,square[i].y1+10,square[i].x1+10,square[i].y2-10);
	showmousepointer();
}

void drawo(int i)	//function definition to draw O
{
	hidemousepointer();
	setcolor(YELLOW);
	circle((square[i].x1+square[i].x2)/2,(square[i].y1+square[i].y2)/2,10);
	showmousepointer();
}

isgameover()	//function definition to check whether the gmae is over
{
	int winner;
	winner=findwinner();
	settextstyle(1,0,2);
	setcolor(GREEN);
	if(winner==X)
	{
		outtextxy(10,250,"X won the game!!");
		return (TRUE);
	}
	else
	{
	 	if(winner==O)
		{
			outtextxy(10,250,"O won the game!!");
			return (TRUE);
		}
		else if(isdrawn())
		{
			outtextxy(10,250,"Game is draw!!");
			return (TRUE);
		}
		else
			return(FALSE);
	}
}

int findwinner()	//function definition to find the winner
{
	static int pattern[8][3]={
						0,1,2,
						3,4,5,
						6,7,8,
						0,3,6,
						1,4,7,
						2,5,8,
						0,4,8,
						2,4,6
					};
	int i;
	for(i=0;i<=7;i++)
	{
		if(arr[pattern[i][0]]==X&&arr[pattern[i][1]]==X&&arr[pattern[i][2]]==X)
			return (X);
		if(arr[pattern[i][0]]==O&&arr[pattern[i][1]]==O&&arr[pattern[i][2]]==O)
			return (O);
	}
	return 0;
}

isdrawn()	//function definition to check whether the game is draw
{
	int i;
	for(i=0;i<=8;i++)
	{
		if(arr[i]==EMPTY)
			return (0);
	}
	return (1);
}

resetgame()	//function definition to reset the game
{
	char ch;
	int i;
	outtextxy(10,300,"Do you want to continue(Y/N)?");
	fflush(stdin);
	ch=getch();
	if(ch=='y'||ch=='Y')
	{
		nextchar=X;
		return('y');
	}
	else
		return('n');
}
